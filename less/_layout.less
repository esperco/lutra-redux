/*
  Basic spacing for elements
*/

/* Spacing  tweaks, resets for common elements */

// Ref: http://alistapart.com/article/axiomatic-css-and-lobotomized-owls
* + * {
  margin-top: @padding-base;
}

p, ul {
  margin: 0;
  * + & {
    margin-top: @padding-base;
  }
}

h1, h2, h3, h4, h5, h6 {
  margin: 0; // No margin bottom because of * + * selector.

  // Extra space only if following something else
  * + & {
    margin-top: @padding-lg;
  }
}

ul {
  list-style: square;
  padding-left: 2em;
}

* + section {
  margin-top: @padding-lg;
}


/* Container / Wrapper Elements */

// Basic one-column container that keeps elements from getting too large
.container {
  max-width: @max-container-width;
  padding: 0 @padding-base;
  margin: @padding-lg auto @padding-xl;

  .content > & {
    margin-top: 0;
    padding: 0;
  }

  // Full-width eaders, footers on mobile
  @media screen and (max-width: @screen-xs-max) {
    & header, & footer {
      margin-left: -@padding-base;
      margin-right: -@padding-base;
    }
  }
}

// Flexbox list of elements spaced evenly apart
.flex {
  display: flex;
  flex-wrap: wrap;

  > * {
    /*
      By default, this spaces all the children out evenly. Modify flex-grow
      to control relative size of elements. Using 1000 as base so we don't
      have to mess with decimals too much.
    */
    flex: 1000 1000 1em;
    margin: @padding-base / 2;
    min-width: @min-container-width;
  }

  // If content width should determine flex spacing
  &.auto > * {
    flex-basis: auto;
  }

  // Correct for extra padding introduced by child elements
  margin: -@padding-base / 2;
  * + & {
    margin-top: @padding-base / 2;
  }
}

* + section.flex {
  margin-top: @padding-lg - (@padding-base / 2);
}


/* For use with specific full-screen layouts */

// Expand to fill relative space
.expand {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  overflow-y: auto;
}

// Generic class for denoting main content in layouts
.content { position: relative; }


/*
  Used for a basic layout with a fixed header (or headers) at the top. We
  assume that the last element in a header layout is expandable and everything
  else is fixed.
*/
.rowbar-layout {
  .expand;

  display: flex;
  flex-flow: column nowrap;
  overflow: auto;

  // By default, elements are fixed
  > * {
    flex: 0 0 auto;
    max-height: 100vh;
    position: relative;
    margin: 0;
    padding: @padding-base;
    z-index: @zindex-navbar;
  }

  // Proper z-indexing for horizontal bars
  > header, > footer, > .banner {
    z-index: auto;
    height: @navbar-height;
    white-space: nowrap;
  }

  // But content expands
  > .content {
    flex: 1000 1000 auto;
    overflow: auto;
    z-index: none;
  }
}

/*
  Used for a basic three-column sidebar layout that's responsive on mobile.
  Can be nested inside .rowbar-layout.

  Should use with .expand to set width / height.

  Different modes for sidebars:

    * XS / Mobile
      - Only show one column at a time, default center.
      - .show-left shows left column, hides center
      - .show-right shows right column, hides left + center

    * SM
      - Always show center, default to only center
      - .show-left shows left column
      - .show-right shows right column, hides left

    * MD
      - Always show center, default to only center
      - .show-left shows left column, does not hide other columns
      - .show-right shows right column, does not hide other columns

    * LG
      - Default to showing left + center
      - .hide-left hides left column
      - .show-right shows right column, does not hide other columns
*/
.sidebar-layout {
  .expand;

  display: flex;
  flex-flow: row nowrap;
  overflow: hidden;

  > * {
    flex: 1000 1000 auto;
    position: relative;
    min-width: 0;
    max-width: 100vw;
    overflow: auto;
    margin: 0;
    padding: @padding-base;
    transition: margin 0.6s ease-in-out, box-shadow 0.6s ease-in-out;
    box-sizing: border-box;
  }

  // Main content resizes, tries to fill full width
  > .content {
    flex: 1000 1000 100vw;
    min-width: @min-container-width;

    // Hide backdrop by default (display on mobile)
    > .backdrop {
      display: none;
    }
  }

  // But sidebars are static
  > .sidebar {
    flex: 0 0 auto;
    margin: 0;
    z-index: @zindex-sidebar;

    // Close button
    .close-btn {
      float: right;

      + * { margin-top: 0; }
    }
  }

  /*
    Selectors for controls to toggle sidebar. There are two modes --
    switch (showing one sidebar disables other) and show (sidebar display
    is independent). Small displays are in switch mode. Larger displays allow
    for showing.
  */
  @media screen and (max-width: @screen-sm-max) {
    .switch-left-btn, .switch-right-btn {
      display: inline-block;
    }
    .show-left-btn, .show-right-btn {
      display: none;
    }
  }

  @media screen and (min-width: @screen-md-min) {
    .show-left-btn, .show-right-btn {
      display: inline-block;
    }
    .switch-left-btn, .switch-right-btn {
      display: none;
    }
  }

  .hide-left-btn, .hide-right-btn {
    display: none;
  }

  /*
    Show sidebars when show is active -- we slide sidebars out left and right
    based on media queries below.
  */
  &.show-left {
    > .sidebar:first-child {
      margin-left: 0;
      box-shadow: @right-box-shadow;
    }

    .hide-left-btn {
      display: inline-block;
    }

    .show-left-btn, .switch-left-btn {
      display: none;
    }
  }

  &.show-right {
    > .sidebar:last-child {
      margin-right: 0;
      box-shadow: @left-box-shadow;
    }

    .hide-right-btn {
      display: inline-block;
    }

    .show-right-btn, .switch-right-btn {
      display: none;
    }
  }

  // XS
  @media screen and (max-width: @screen-xs-max) {
    & > .sidebar:first-child,
    &.hide-left > .sidebar:first-child {
      width: @left-sidebar-width-xs;
      margin-left: -@left-sidebar-width-xs;
    }

    & > .sidebar:last-child,
    &.hide-right > .sidebar:last-child {
      width: @right-sidebar-width-xs;
      margin-right: -@right-sidebar-width-xs;
    }

    & > .content {
      width: 100vw;
    }

    &.show-right > .content {
      margin-left: -@right-sidebar-width-xs;
    }

    // Backdrop visible on mobile
    &.show-left, &.show-right {
      > .content > .backdrop {
        display: block;
      }
    }
  }

  // SM
  @media screen and (min-width: @screen-sm-min) {
    & > .sidebar:first-child,
    &.hide-left > .sidebar:first-child {
      width: @left-sidebar-width-sm;
      margin-left: -@left-sidebar-width-sm;
    }

    & > .sidebar:last-child,
    &.hide-right > .sidebar:last-child {
      width: @right-sidebar-width-sm;
      margin-right: -@right-sidebar-width-sm;
    }
  }

  // SM and below -> right sidebar hides left
  @media screen and (max-width: @screen-sm-max) {
    &.show-left.show-right {
      > .sidebar:first-child {
        margin-left: -@left-sidebar-width-sm;
      }

      .hide-left-btn {
        display: none;
      }

      .switch-left-btn {
        display: inline-block;
      }
    }
  }

  @media screen and (max-width: @screen-xs-max) {
    &.show-left.show-right > .sidebar:first-child {
      margin-left: -@left-sidebar-width-xs;
    }
  }

  // MD
  @media screen and (min-width: @screen-md-min) {
    & > .sidebar:first-child,
    &.hide-left > .sidebar:first-child {
      width: @left-sidebar-width-md;
      margin-left: -@left-sidebar-width-md;
    }

    & > .sidebar:last-child,
    &.hide-right > .sidebar:last-child {
      width: @right-sidebar-width-md;
      margin-right: -@right-sidebar-width-md;
    }
  }

  // LG
  @media screen and (min-width: @screen-lg-min) {
    & > .sidebar:first-child,
    &.hide-left > .sidebar:first-child {
      width: @left-sidebar-width-lg;
    }

    & > .sidebar:first-child {
      margin-left: 0;
      box-shadow: @right-box-shadow;
    }

    .hide-left-btn {
      display: inline-block;
    }

    .show-left-btn {
      display: none;
    }

    &.hide-left {
      > .sidebar:first-child {
        margin-left: -@left-sidebar-width-lg;
      }

      .hide-left-btn {
        display: none;
      }

      .show-left-btn {
        display: inline-block;
      }
    }

    & > .sidebar:last-child,
    &.hide-right > .sidebar:last-child {
      width: @right-sidebar-width-lg;
      margin-right: -@right-sidebar-width-lg;
    }
  }

  // Apply panel class directly to sidebar to prevent stacking padding
  .sidebar.panel {
    border-width: 0;
    border-radius: 0;
    box-shadow: none;

    &:first-child { // Left
      border-right-width: 1px;
    }

    &:last-child { // Right
      border-left-width: 1px;
    }

    .close-btn {
      position: relative;
      top: -@padding-small;
      right: -@padding-small;
    }
  }
}
